# Reusable Auto-Sync Workflow Template for Forked Repositories
#
# This workflow keeps your fork synchronized with the upstream repository.
# Copy this file to any forked repo's .github/workflows/ directory and update
# the UPSTREAM_REPO variable.
#
# Features:
# - Runs daily at 2 AM UTC
# - Can be triggered manually via GitHub UI
# - Auto-merges upstream changes
# - Creates PR if conflicts are detected
# - Sends notifications on failure

name: Sync Fork with Upstream

on:
  # Run automatically every day at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

  # Allow manual trigger via GitHub Actions UI
  workflow_dispatch:

  # Allow trigger via API or webhook
  repository_dispatch:
    types: [upstream-update]

env:
  # IMPORTANT: Update this to match your upstream repository
  # Format: owner/repo-name
  UPSTREAM_REPO: 'REPLACE_WITH_UPSTREAM_OWNER/REPLACE_WITH_UPSTREAM_REPO'
  UPSTREAM_BRANCH: 'main'  # Update if upstream uses different default branch

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history needed for merge

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
          git fetch upstream --tags

      - name: Check for upstream changes
        id: check_changes
        run: |
          BEHIND_COUNT=$(git rev-list --count HEAD..upstream/${{ env.UPSTREAM_BRANCH }})
          echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT

          if [ "$BEHIND_COUNT" -eq "0" ]; then
            echo "✅ Fork is up to date with upstream"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📥 Fork is $BEHIND_COUNT commits behind upstream"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Try auto-merge
        if: steps.check_changes.outputs.has_changes == 'true'
        id: auto_merge
        continue-on-error: true
        run: |
          git merge upstream/${{ env.UPSTREAM_BRANCH }} --no-edit

      - name: Push changes (if auto-merge succeeded)
        if: steps.auto_merge.outcome == 'success'
        run: |
          git push origin ${{ env.UPSTREAM_BRANCH }}
          echo "✅ Successfully synced with upstream"

      - name: Create PR for manual merge (if conflicts detected)
        if: steps.auto_merge.outcome == 'failure'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Sync with upstream ${{ env.UPSTREAM_REPO }}'
          title: '🔄 Sync with upstream - Manual merge required'
          body: |
            ## Upstream Sync Conflict

            Automatic merge from upstream failed due to conflicts.

            **Upstream**: `${{ env.UPSTREAM_REPO }}`
            **Branch**: `${{ env.UPSTREAM_BRANCH }}`

            Please review and manually resolve conflicts.

            ---
            🤖 Auto-generated by fork-sync workflow
          branch: sync-upstream-${{ github.run_number }}
          delete-branch: true

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "false" ]; then
            echo "### ✅ Fork is up to date" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.auto_merge.outcome }}" == "success" ]; then
            echo "### ✅ Successfully synced with upstream" >> $GITHUB_STEP_SUMMARY
            echo "Merged ${{ steps.check_changes.outputs.behind_count }} commits" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Manual merge required" >> $GITHUB_STEP_SUMMARY
            echo "Created PR for manual conflict resolution" >> $GITHUB_STEP_SUMMARY
          fi
